// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// Input file <Parsers\JavaScript\JavaScriptRegExp.y - 4/30/2012 10:21:34 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace RegexLib.Parsers.JavaScript
{
internal enum Tokens {
    error=1,EOF=2,pipe=3,carat=4,dollar=5,backSlash=6,
    boundary=7,notBoundary=8,lParen=9,rParen=10,positive=11,negative=12,
    lazy=13,anyNumber=14,oneOrMore=15,zeroOrOne=16,lBrace=17,rBrace=18,
    comma=19,anyChar=20,suppress=21,patternCharacter=22,control=23,controlEscape=24,
    controlLetter=25,identityEscape=26,lookaheadNotDecimalDigit=27,characterClassEscape=28,lBracket=29,rBracket=30,
    lookaheadNotCarat=31,dash=32,classAtomCharacter=33,b=34,zero=35,decimalDigit=36,
    nonZeroDigit=37,x=38,u=39,hexDigit=40};

// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<int,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

internal class Parser: ShiftReduceParser<int, LexLocation>
{
  // Verbatim content from Parsers\JavaScript\JavaScriptRegExp.y - 4/30/2012 10:21:34 PM
#line 44 "Parsers\JavaScript\JavaScriptRegExp.y"
	internal Parser(Scanner lex)
#line 45 "Parsers\JavaScript\JavaScriptRegExp.y"
		: base(lex)
#line 46 "Parsers\JavaScript\JavaScriptRegExp.y"
	{
#line 47 "Parsers\JavaScript\JavaScriptRegExp.y"
	}
  // End verbatim content from Parsers\JavaScript\JavaScriptRegExp.y - 4/30/2012 10:21:34 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[72];
  private static State[] states = new State[104];
  private static string[] nonTerms = new string[] {
      "Start", "$accept", "Disjunction", "Alternative", "Term", "Assertion", 
      "Atom", "Quantifier", "QuantifierPrefix", "DecimalDigits", "PatternCharacter", 
      "AtomEscape", "CharacterClass", "DecimalEscape", "CharacterEscape", "CharacterClassEscape", 
      "ControlEscape", "ControlLetter", "HexEscapeSequence", "UnicodeEscapeSequence", 
      "IdentityEscape", "DecimalIntegerLiteral", "ClassRanges", "NonemptyClassRanges", 
      "ClassAtom", "NonemptyClassRangesNoDash", "ClassAtomNoDash", "ClassEscape", 
      "NonZeroDigit", "DecimalDigit", "HexDigit", };

  static Parser() {
    states[0] = new State(-5,new int[]{-1,1,-3,3,-4,4});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{3,6,4,9,5,10,6,11,9,46,22,73,20,74,29,76,2,-3,10,-3},new int[]{-5,5,-6,8,-7,58,-11,72,-13,75});
    states[5] = new State(-6);
    states[6] = new State(-5,new int[]{-3,7,-4,4});
    states[7] = new State(-4);
    states[8] = new State(-7);
    states[9] = new State(-10);
    states[10] = new State(-11);
    states[11] = new State(new int[]{7,12,8,13,35,18,37,24,24,27,23,28,38,32,39,37,26,43,28,45},new int[]{-12,14,-14,15,-22,16,-29,19,-15,25,-17,26,-19,31,-20,36,-21,42,-16,44});
    states[12] = new State(-12);
    states[13] = new State(-13);
    states[14] = new State(-26);
    states[15] = new State(-31);
    states[16] = new State(new int[]{27,17});
    states[17] = new State(-42);
    states[18] = new State(-62);
    states[19] = new State(new int[]{36,23,27,-63},new int[]{-10,20,-30,21});
    states[20] = new State(-64);
    states[21] = new State(new int[]{36,23,27,-65,18,-65,19,-65},new int[]{-10,22,-30,21});
    states[22] = new State(-66);
    states[23] = new State(-67);
    states[24] = new State(-68);
    states[25] = new State(-32);
    states[26] = new State(-34);
    states[27] = new State(-39);
    states[28] = new State(new int[]{25,30},new int[]{-18,29});
    states[29] = new State(-35);
    states[30] = new State(-40);
    states[31] = new State(-36);
    states[32] = new State(new int[]{40,35},new int[]{-31,33});
    states[33] = new State(new int[]{40,35},new int[]{-31,34});
    states[34] = new State(-69);
    states[35] = new State(-71);
    states[36] = new State(-37);
    states[37] = new State(new int[]{40,35},new int[]{-31,38});
    states[38] = new State(new int[]{40,35},new int[]{-31,39});
    states[39] = new State(new int[]{40,35},new int[]{-31,40});
    states[40] = new State(new int[]{40,35},new int[]{-31,41});
    states[41] = new State(-70);
    states[42] = new State(-38);
    states[43] = new State(-41);
    states[44] = new State(-33);
    states[45] = new State(-43);
    states[46] = new State(new int[]{11,47,12,50,21,55,3,-5,4,-5,5,-5,6,-5,9,-5,22,-5,20,-5,29,-5,10,-5},new int[]{-3,53,-4,4});
    states[47] = new State(-5,new int[]{-3,48,-4,4});
    states[48] = new State(new int[]{10,49});
    states[49] = new State(-14);
    states[50] = new State(-5,new int[]{-3,51,-4,4});
    states[51] = new State(new int[]{10,52});
    states[52] = new State(-15);
    states[53] = new State(new int[]{10,54});
    states[54] = new State(-28);
    states[55] = new State(-5,new int[]{-3,56,-4,4});
    states[56] = new State(new int[]{10,57});
    states[57] = new State(-29);
    states[58] = new State(new int[]{14,62,15,63,16,64,17,65,3,-8,4,-8,5,-8,6,-8,9,-8,22,-8,20,-8,29,-8,2,-8,10,-8},new int[]{-8,59,-9,60});
    states[59] = new State(-9);
    states[60] = new State(new int[]{13,61,3,-16,4,-16,5,-16,6,-16,9,-16,22,-16,20,-16,29,-16,2,-16,10,-16});
    states[61] = new State(-17);
    states[62] = new State(-18);
    states[63] = new State(-19);
    states[64] = new State(-20);
    states[65] = new State(new int[]{36,23},new int[]{-10,66,-30,21});
    states[66] = new State(new int[]{18,67,19,68});
    states[67] = new State(-21);
    states[68] = new State(new int[]{18,69,36,23},new int[]{-10,70,-30,21});
    states[69] = new State(-22);
    states[70] = new State(new int[]{18,71});
    states[71] = new State(-23);
    states[72] = new State(-24);
    states[73] = new State(-30);
    states[74] = new State(-25);
    states[75] = new State(-27);
    states[76] = new State(new int[]{31,77,4,101});
    states[77] = new State(new int[]{32,86,33,88,6,89,30,-46},new int[]{-23,78,-24,80,-25,81,-27,87});
    states[78] = new State(new int[]{30,79});
    states[79] = new State(-44);
    states[80] = new State(-47);
    states[81] = new State(new int[]{32,83,33,88,6,89,30,-48},new int[]{-26,82,-25,95,-27,96});
    states[82] = new State(-49);
    states[83] = new State(new int[]{32,86,33,88,6,89,30,-54},new int[]{-25,84,-27,87});
    states[84] = new State(new int[]{32,86,33,88,6,89,30,-46},new int[]{-23,85,-24,80,-25,81,-27,87});
    states[85] = new State(-50);
    states[86] = new State(-54);
    states[87] = new State(-55);
    states[88] = new State(-56);
    states[89] = new State(new int[]{35,18,37,24,34,92,24,27,23,28,38,32,39,37,26,43,28,45},new int[]{-28,90,-14,91,-22,16,-29,19,-15,93,-17,26,-19,31,-20,36,-21,42,-16,94});
    states[90] = new State(-57);
    states[91] = new State(-58);
    states[92] = new State(-59);
    states[93] = new State(-60);
    states[94] = new State(-61);
    states[95] = new State(-51);
    states[96] = new State(new int[]{32,98,33,88,6,89,30,-55},new int[]{-26,97,-25,95,-27,96});
    states[97] = new State(-52);
    states[98] = new State(new int[]{32,86,33,88,6,89,30,-54},new int[]{-25,99,-27,87});
    states[99] = new State(new int[]{32,86,33,88,6,89,30,-46},new int[]{-23,100,-24,80,-25,81,-27,87});
    states[100] = new State(-53);
    states[101] = new State(new int[]{32,86,33,88,6,89,30,-46},new int[]{-23,102,-24,80,-25,81,-27,87});
    states[102] = new State(new int[]{30,103});
    states[103] = new State(-45);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-4,3,-3});
    rules[5] = new Rule(-4, new int[]{});
    rules[6] = new Rule(-4, new int[]{-4,-5});
    rules[7] = new Rule(-5, new int[]{-6});
    rules[8] = new Rule(-5, new int[]{-7});
    rules[9] = new Rule(-5, new int[]{-7,-8});
    rules[10] = new Rule(-6, new int[]{4});
    rules[11] = new Rule(-6, new int[]{5});
    rules[12] = new Rule(-6, new int[]{6,7});
    rules[13] = new Rule(-6, new int[]{6,8});
    rules[14] = new Rule(-6, new int[]{9,11,-3,10});
    rules[15] = new Rule(-6, new int[]{9,12,-3,10});
    rules[16] = new Rule(-8, new int[]{-9});
    rules[17] = new Rule(-8, new int[]{-9,13});
    rules[18] = new Rule(-9, new int[]{14});
    rules[19] = new Rule(-9, new int[]{15});
    rules[20] = new Rule(-9, new int[]{16});
    rules[21] = new Rule(-9, new int[]{17,-10,18});
    rules[22] = new Rule(-9, new int[]{17,-10,19,18});
    rules[23] = new Rule(-9, new int[]{17,-10,19,-10,18});
    rules[24] = new Rule(-7, new int[]{-11});
    rules[25] = new Rule(-7, new int[]{20});
    rules[26] = new Rule(-7, new int[]{6,-12});
    rules[27] = new Rule(-7, new int[]{-13});
    rules[28] = new Rule(-7, new int[]{9,-3,10});
    rules[29] = new Rule(-7, new int[]{9,21,-3,10});
    rules[30] = new Rule(-11, new int[]{22});
    rules[31] = new Rule(-12, new int[]{-14});
    rules[32] = new Rule(-12, new int[]{-15});
    rules[33] = new Rule(-12, new int[]{-16});
    rules[34] = new Rule(-15, new int[]{-17});
    rules[35] = new Rule(-15, new int[]{23,-18});
    rules[36] = new Rule(-15, new int[]{-19});
    rules[37] = new Rule(-15, new int[]{-20});
    rules[38] = new Rule(-15, new int[]{-21});
    rules[39] = new Rule(-17, new int[]{24});
    rules[40] = new Rule(-18, new int[]{25});
    rules[41] = new Rule(-21, new int[]{26});
    rules[42] = new Rule(-14, new int[]{-22,27});
    rules[43] = new Rule(-16, new int[]{28});
    rules[44] = new Rule(-13, new int[]{29,31,-23,30});
    rules[45] = new Rule(-13, new int[]{29,4,-23,30});
    rules[46] = new Rule(-23, new int[]{});
    rules[47] = new Rule(-23, new int[]{-24});
    rules[48] = new Rule(-24, new int[]{-25});
    rules[49] = new Rule(-24, new int[]{-25,-26});
    rules[50] = new Rule(-24, new int[]{-25,32,-25,-23});
    rules[51] = new Rule(-26, new int[]{-25});
    rules[52] = new Rule(-26, new int[]{-27,-26});
    rules[53] = new Rule(-26, new int[]{-27,32,-25,-23});
    rules[54] = new Rule(-25, new int[]{32});
    rules[55] = new Rule(-25, new int[]{-27});
    rules[56] = new Rule(-27, new int[]{33});
    rules[57] = new Rule(-27, new int[]{6,-28});
    rules[58] = new Rule(-28, new int[]{-14});
    rules[59] = new Rule(-28, new int[]{34});
    rules[60] = new Rule(-28, new int[]{-15});
    rules[61] = new Rule(-28, new int[]{-16});
    rules[62] = new Rule(-22, new int[]{35});
    rules[63] = new Rule(-22, new int[]{-29});
    rules[64] = new Rule(-22, new int[]{-29,-10});
    rules[65] = new Rule(-10, new int[]{-30});
    rules[66] = new Rule(-10, new int[]{-30,-10});
    rules[67] = new Rule(-30, new int[]{36});
    rules[68] = new Rule(-29, new int[]{37});
    rules[69] = new Rule(-19, new int[]{38,-31,-31});
    rules[70] = new Rule(-20, new int[]{39,-31,-31,-31,-31});
    rules[71] = new Rule(-31, new int[]{40});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
