// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// Input file <Parsers\JavaScript\JavaScriptRegExp.y - 6/9/2012 8:57:21 AM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace RegexLib.Parsers.JavaScript
{
internal enum Tokens {
    error=1,EOF=2,PIPE=3,CARAT=4,DOLLAR=5,PAREN_L=6,
    PAREN_R=7,QUESTION=8,STAR=9,PLUS=10,BRACKET_L=11,BRACKET_R=12,
    LITERAL_CHAR=13};

internal struct ValueType
#line 16 "Parsers\JavaScript\JavaScriptRegExp.y"
{
#line 17 "Parsers\JavaScript\JavaScriptRegExp.y"
	public RegexNode Node;
#line 18 "Parsers\JavaScript\JavaScriptRegExp.y"
	public Token Token;
#line 19 "Parsers\JavaScript\JavaScriptRegExp.y"
}
// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

internal class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from Parsers\JavaScript\JavaScriptRegExp.y - 6/9/2012 8:57:21 AM
#line 7 "Parsers\JavaScript\JavaScriptRegExp.y"
	public RegexNode RootNode { get; set; }
#line 8 "Parsers\JavaScript\JavaScriptRegExp.y"

#line 9 "Parsers\JavaScript\JavaScriptRegExp.y"
	internal Parser(Scanner lex)
#line 10 "Parsers\JavaScript\JavaScriptRegExp.y"
		: base(lex)
#line 11 "Parsers\JavaScript\JavaScriptRegExp.y"
	{
#line 12 "Parsers\JavaScript\JavaScriptRegExp.y"
	}
  // End verbatim content from Parsers\JavaScript\JavaScriptRegExp.y - 6/9/2012 8:57:21 AM

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[8];
  private static State[] states = new State[9];
  private static string[] nonTerms = new string[] {
      "Start", "Disjunction", "Alternative", "Term", "$accept", };

  static Parser() {
    states[0] = new State(-5,new int[]{-1,1,-2,3,-3,4});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{3,6,13,8,2,-3},new int[]{-4,5});
    states[5] = new State(-6);
    states[6] = new State(-5,new int[]{-2,7,-3,4});
    states[7] = new State(-4);
    states[8] = new State(-7);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-5, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-2});
    rules[3] = new Rule(-2, new int[]{-3});
    rules[4] = new Rule(-2, new int[]{-3,3,-2});
    rules[5] = new Rule(-3, new int[]{});
    rules[6] = new Rule(-3, new int[]{-3,-4});
    rules[7] = new Rule(-4, new int[]{13});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // Start -> Disjunction
#line 29 "Parsers\JavaScript\JavaScriptRegExp.y"
{ this.RootNode = CurrentSemanticValue.Node; }
        break;
      case 3: // Disjunction -> Alternative
#line 33 "Parsers\JavaScript\JavaScriptRegExp.y"
{ CurrentSemanticValue.Node = ValueStack[ValueStack.Depth-1].Node; }
        break;
      case 4: // Disjunction -> Alternative, PIPE, Disjunction
#line 34 "Parsers\JavaScript\JavaScriptRegExp.y"
{ CurrentSemanticValue.Node = new AlternationNode(ValueStack[ValueStack.Depth-3].Node, ValueStack[ValueStack.Depth-1].Node); }
        break;
      case 6: // Alternative -> Alternative, Term
#line 39 "Parsers\JavaScript\JavaScriptRegExp.y"
{ CurrentSemanticValue.Node = ValueStack[ValueStack.Depth-2].Node == null ? ValueStack[ValueStack.Depth-1].Node : new ConcatenationNode(ValueStack[ValueStack.Depth-2].Node, ValueStack[ValueStack.Depth-1].Node); }
        break;
      case 7: // Term -> LITERAL_CHAR
#line 43 "Parsers\JavaScript\JavaScriptRegExp.y"
{ CurrentSemanticValue.Node = new CharacterClassNode(ValueStack[ValueStack.Depth-1].Token.Value[0]); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
